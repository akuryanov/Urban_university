# Задачи по теме "Работа со списками"
'''
Список – последовательность элементов, объединенных в один контейнер. Главная особенность – они изменяемы.
Элементы списка индексируются, состоят в основном из однотипных данных, перебираются, сохраняют порядок.
'''
from zoneinfo import available_timezones

# Задача_1
'''
Дан произвольный список. Представьте его в обратном порядке.
'''

# my_list = [1, 2, 3, 4, 5]
# # 1 Способ
# print(my_list[::-1])
#
# # 2 Способ
# my_list.reverse()
# print(my_list)

# Задача_2
'''
Напишите функцию change(lst), которая принимает список и меняет местами его первый и последний элемент. 
В исходном списке минимум 2 элемента.
'''
# # 1 способ
# def change(lst):
#     new_first_ = lst[-1]
#     new_last_ = lst[0]
#     lst[0] = new_first_
#     lst[-1] = new_last_
#     return lst
#
# print(change([1, 2, 3, 4, 5]))
#
# # 2 способ
# def change(lst):
#     lst[-1], lst[0] = lst[0], lst[-1]
#     return lst
#
# print(change([1, 2, 3, 4, 5]))
#
# # 3 способ
# def change(lst):
#     new_first_ = lst.pop() # вырезаем последний элемент списка
#     new_last_ = lst.pop(0) # вырезаем первый элемент списка
#     lst.append(new_first_) # Добавляем новый последний элемент
#     lst.insert(new_last_) # Добавляем новый первый элемент

# Задача_3
'''
Функция to_list() принимает неограниченное количество параметров.
Обработайте их так, чтобы на выходе получить список из этих элементов.
'''

# def to_list(*args):
#     return list(args) # Вывод функции всегда в виде кортежа если применить функцию list() вывод будет в виде списка
#
# print(to_list(1, 'a', 's', 3, True, 'e'))

# Задача_4
'''
Николай задумался о поиске «бесполезного» числа на основании списка. 
Суть оного в следующем: он берет произвольный список чисел, находит самое большое из них, 
а затем делит его на длину списка. 
Студент пока не придумал, где может пригодиться подобное значение, 
но ищет у вас помощи в реализации такой функции useless(s).
'''
# def useless(s):
#     return max(s) / len(s)
#
# s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1]
# print(useless(s))


# # Список доступных начинок
# available_toppings = ['грибы', 'оливки', 'зеленый перец', 'пепперони', 'ананас', 'дополнительный сыр']
# # список начинок, заказанных клиентом
# requested_toppings = ['грибы', 'картофель фри', 'дополнительный сыр']
#
# # Проверяем наличие каждого элемента из списка начинок, заказанных клиентом, в списке доступных начинок
# for requested_toppings in requested_toppings:
#     if requested_toppings in available_toppings:
#         print(f'В Вашу пиццу добавлена дополнительная начинка "{requested_toppings}"')
#     else:
#         print(f'Извините дополнительную начинку "{requested_toppings}" невозможно добавить в Вашу пиццу')


'''
Здравствуйте, админ! 
Создайте список из пяти и более имен пользователей, содержащий имя 'admin'. 
Представьте, что пишете код, который выводит приветственное сообщение для каждого пользователя после его входа на сайт.
Переберите элементы списка и выведите сообщение для каждого пользователя:
• для пользователя  'admin' выведите особое сообщение: например, «Здравствуйте, admin, хотите просмотреть отчет о состоянии дел?»;
• в остальных случаях выводите универсальное приветствие: например, «Привет, Денис, спасибо, что авторизовался в системе».

'''
#
# users = ['Денис', 'Артём', 'Сергей', 'админ', 'Михаил']
# for users in users:
#     if users != 'админ':
#         print(f'Привет, {users}, спасибо, что авторизовался в системе')
#     else:
#         print(f'Здравствуйте, {users}, хотите просмотреть отчет о состоянии дел?')

'''
 Проверка имен пользователей. 
 Выполните следующие действия, чтобы создать программу, имитирующую проверку сайтом уникальности имен пользователей.
• Создайте список current_users, содержащий пять и более имен пользователей.
• Создайте список new_users, содержащий пять имен пользователей. 
  Убедитесь в том, что одно или два новых имени также присутствуют в списке current_users.
• Переберите список new_users и проверьте, было ли использовано ранее каждое имя в этом списке. 
  Если да, то выведите сообщение о том, что пользователь должен выбрать новое имя. 
  Если нет, то выведите сообщение о доступности имени.
• Проследите за тем, чтобы сравнение выполнялось без учета регистра символов.
  Если имя 'John' уже используется, то в регистрации имени 'JOHN' следует отказать. 
  (Для этого необходимо создать копию current_users, содержащую версию всех существующих имен пользователей, 
  написанных в нижнем регистре.)

'''

current_users = ['Alex', 'Den', 'Sam', 'admin', 'John', 'Lisa']
new_user = ['alexandr', 'denis', 'samuel', 'admin', 'John', 'JOHN']
current_users_lower = []
for current_user in current_users:
    current_user_lower = current_user.lower()
    current_users_lower.append(current_user_lower)

for new_user in new_user:
    new_user_lower = new_user.lower()
    if new_user_lower in current_users_lower:
        print(f'!!! ОТКАЗ В РЕГИСТРАЦИИ !!!')
        print(f'имя пользователя {new_user} уже используется')
    else:
        current_users.append(new_user)
        print(f'Пользователь {new_user} успешно зарегистрирован в системе')

print(current_users)


