# Генератор - это специальная функция, которая возвращает итератор,
# с помощью которого, можно обойти некоторую последовательность значений
#
# Когда функция - генератор вызывается, она не выполняет свое тело сразу, а возвращает объект-генератор,
# итерация по которому будет выполнять тело функции и возвращать значения по мере их генерации
# Итераторы требуют больше кода и больше понимания протокола итератора
# Генераторы позволяют создать итератор более простым и удобным способом
# Так же есть генераторные сборки
# Генераторы можно прочитать только один раз

#=====================================================
# Генераторные сборки

# my_numbers = [3, 1, 4 , 1, 5, 9, 2, 6]
# result = (x ** 100 for x in my_numbers) # Пример генераторной сборки
#
# print(result)

#=====================================================

# Пример функции генератора
# def func_generator(n):
#     i = 0
#     while i != n:
#         yield i # специальное ключевое слово для возврата элемента используется вместо return
#         i += 1
#
# obj = func_generator(10)
# print(obj)
#
# for i in obj:
#     print(i)

# Пример вычисления чисел Фибоначчи через генератор

def fibonacci(n):
    pass


# Пример чтения данных из файла

def read_large_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:
            yield line.strip()

for line in read_large_file('test.txt'):
    print(line)

    


